{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Pytorch-MLP+regularization.ipynb","provenance":[{"file_id":"https://github.com/heartcored98/Standalone-DeepLearning/blob/master/Lec4/Lab5_regularization_implemented.ipynb","timestamp":1613106573220}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"78ce651bd4704862a195ca8e7d4170f3":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_f79defb61115477c9bad1cdcf01d06c6","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_e4da0f0b6e174f568e54d8d711c63d1f","IPY_MODEL_baf11e055e33424ca6f80efae6aced29"]}},"f79defb61115477c9bad1cdcf01d06c6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e4da0f0b6e174f568e54d8d711c63d1f":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_dc6ceabfe45840069ce16b816a8e8ba7","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_fe2f6869958b4732956a9206f24d6fcf"}},"baf11e055e33424ca6f80efae6aced29":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_272df29b2e094a97965c7b5408543ac4","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 170500096/? [00:20&lt;00:00, 102560099.62it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_49b4bffcedc34b278711fcb009019366"}},"dc6ceabfe45840069ce16b816a8e8ba7":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"fe2f6869958b4732956a9206f24d6fcf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"272df29b2e094a97965c7b5408543ac4":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"49b4bffcedc34b278711fcb009019366":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"8OE_lox7pMPi"},"source":["[제가 미리 만들어놓은 이 링크](https://colab.research.google.com/github/heartcored98/Standalone-DeepLearning/blob/master/Lec4/Lab5_regularization_implemented.ipynb)를 통해 Colab에서 바로 작업하실 수 있습니다!  \n","런타임 유형은 python3, GPU 가속 확인하기!"]},{"cell_type":"code","metadata":{"id":"PD4cIKKvKFCC","executionInfo":{"status":"ok","timestamp":1613106660918,"user_tz":-540,"elapsed":4230,"user":{"displayName":"‍심준교(학부학생/공과대학 산업공학과)","photoUrl":"","userId":"04091016504591860502"}}},"source":["import torch\n","import torchvision\n","import torchvision.transforms as transforms\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","import argparse\n","import numpy as np\n","import time"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"29UainWPco7Y"},"source":["## Data Preparation"]},{"cell_type":"code","metadata":{"id":"Cu753dPPKGkV","colab":{"base_uri":"https://localhost:8080/","height":103,"referenced_widgets":["78ce651bd4704862a195ca8e7d4170f3","f79defb61115477c9bad1cdcf01d06c6","e4da0f0b6e174f568e54d8d711c63d1f","baf11e055e33424ca6f80efae6aced29","dc6ceabfe45840069ce16b816a8e8ba7","fe2f6869958b4732956a9206f24d6fcf","272df29b2e094a97965c7b5408543ac4","49b4bffcedc34b278711fcb009019366"]},"executionInfo":{"status":"ok","timestamp":1613106667245,"user_tz":-540,"elapsed":5723,"user":{"displayName":"‍심준교(학부학생/공과대학 산업공학과)","photoUrl":"","userId":"04091016504591860502"}},"outputId":"603194f6-54a5-4a81-b813-612b1d80e4bd"},"source":["transform = transforms.Compose(\n","    [transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n","\n","trainset = torchvision.datasets.CIFAR10(root='./data', train=True,\n","                                        download=True, transform=transform)\n","trainset, valset = torch.utils.data.random_split(trainset, [40000, 10000])\n","testset = torchvision.datasets.CIFAR10(root='./data', train=False,\n","                                       download=True, transform=transform)\n","partition = {'train': trainset, 'val':valset, 'test':testset}"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"78ce651bd4704862a195ca8e7d4170f3","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=1.0, bar_style='info', max=1.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Extracting ./data/cifar-10-python.tar.gz to ./data\n","Files already downloaded and verified\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RxnfFJwBcsAv"},"source":["## Model Architecture"]},{"cell_type":"code","metadata":{"id":"_G6bZbbkMWWt","executionInfo":{"status":"ok","timestamp":1613106676719,"user_tz":-540,"elapsed":613,"user":{"displayName":"‍심준교(학부학생/공과대학 산업공학과)","photoUrl":"","userId":"04091016504591860502"}}},"source":["class MLP(nn.Module):\n","    def __init__(self, in_dim, out_dim, hid_dim, n_layer, act, dropout, use_bn, use_xavier):\n","        super(MLP, self).__init__()\n","        self.in_dim = in_dim\n","        self.out_dim = out_dim\n","        self.hid_dim = hid_dim\n","        self.n_layer = n_layer\n","        self.act = act\n","        self.dropout = dropout\n","        self.use_bn = use_bn\n","        self.use_xavier = use_xavier\n","        \n","        # ====== Create Linear Layers ====== #\n","        self.fc1 = nn.Linear(self.in_dim, self.hid_dim)\n","        \n","        self.linears = nn.ModuleList()\n","        self.bns = nn.ModuleList()\n","        for i in range(self.n_layer-1):\n","            self.linears.append(nn.Linear(self.hid_dim, self.hid_dim))\n","            if self.use_bn:\n","                self.bns.append(nn.BatchNorm1d(self.hid_dim))\n","                \n","        self.fc2 = nn.Linear(self.hid_dim, self.out_dim)\n","        \n","        # ====== Create Activation Function ====== #\n","        if self.act == 'relu':\n","            self.act = nn.ReLU()\n","        elif self.act == 'tanh':\n","            self.act == nn.Tanh()\n","        elif self.act == 'sigmoid':\n","            self.act = nn.Sigmoid()\n","        else:\n","            raise ValueError('no valid activation function selected!')\n","        \n","        # ====== Create Regularization Layer ======= #\n","        self.dropout = nn.Dropout(self.dropout)\n","        if self.use_xavier:\n","            self.xavier_init()\n","          \n","    def forward(self, x):\n","        x = self.act(self.fc1(x))\n","        for i in range(len(self.linears)):\n","            x = self.act(self.linears[i](x))\n","            x = self.bns[i](x)\n","            x = self.dropout(x)\n","        x = self.fc2(x)\n","        return x\n","    \n","    def xavier_init(self):\n","        for linear in self.linears:\n","            nn.init.xavier_normal_(linear.weight)\n","            linear.bias.data.fill_(0.01)\n","            \n","net = MLP(3072, 10, 100, 4, 'relu', 0.1, True, True) # Testing Model Construction"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"itGsp6jDWs_a"},"source":["## Train, Validate, Test and Experiment"]},{"cell_type":"code","metadata":{"id":"h0BgIVLEpMPq","executionInfo":{"status":"ok","timestamp":1613106679368,"user_tz":-540,"elapsed":626,"user":{"displayName":"‍심준교(학부학생/공과대학 산업공학과)","photoUrl":"","userId":"04091016504591860502"}}},"source":["def train(net, partition, optimizer, criterion, args):\n","    trainloader = torch.utils.data.DataLoader(partition['train'], \n","                                              batch_size=args.train_batch_size, \n","                                              shuffle=True,\n","                                              num_workers=2)\n","    net.train()\n","\n","    correct = 0\n","    total = 0\n","    train_loss = 0.0\n","    for i, data in enumerate(trainloader, 0):\n","        optimizer.zero_grad() # [21.01.05 오류 수정] 매 Epoch 마다 .zero_grad()가 실행되는 것을 매 iteration 마다 실행되도록 수정했습니다. \n","\n","        # get the inputs\n","        inputs, labels = data\n","        inputs = inputs.view(-1, 3072)\n","        inputs = inputs.cuda()\n","        labels = labels.cuda()\n","        outputs = net(inputs)\n","\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss += loss.item()\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","    train_loss = train_loss / len(trainloader)\n","    train_acc = 100 * correct / total\n","    return net, train_loss, train_acc"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"oTtE5mdmpMPr","executionInfo":{"status":"ok","timestamp":1613106681349,"user_tz":-540,"elapsed":587,"user":{"displayName":"‍심준교(학부학생/공과대학 산업공학과)","photoUrl":"","userId":"04091016504591860502"}}},"source":["def validate(net, partition, criterion, args):\n","    valloader = torch.utils.data.DataLoader(partition['val'], \n","                                            batch_size=args.test_batch_size, \n","                                            shuffle=False,\n","                                            num_workers=2)\n","    net.eval()\n","\n","    correct = 0\n","    total = 0\n","    val_loss = 0 \n","    with torch.no_grad():\n","        for data in valloader:\n","            images, labels = data\n","            images = images.view(-1, 3072)\n","            images = images.cuda()\n","            labels = labels.cuda()\n","            outputs = net(images)\n","\n","            loss = criterion(outputs, labels)\n","            \n","            val_loss += loss.item()\n","            _, predicted = torch.max(outputs.data, 1)\n","            total += labels.size(0)\n","            correct += (predicted == labels).sum().item()\n","\n","        val_loss = val_loss / len(valloader)\n","        val_acc = 100 * correct / total\n","    return val_loss, val_acc"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"JMaT2NZOpMPr","executionInfo":{"status":"ok","timestamp":1613106683239,"user_tz":-540,"elapsed":612,"user":{"displayName":"‍심준교(학부학생/공과대학 산업공학과)","photoUrl":"","userId":"04091016504591860502"}}},"source":["def test(net, partition, args):\n","    testloader = torch.utils.data.DataLoader(partition['test'], \n","                                             batch_size=args.test_batch_size, \n","                                             shuffle=False,\n","                                             num_workers=2)\n","    net.eval()\n","    \n","    correct = 0\n","    total = 0\n","    with torch.no_grad():\n","        for data in testloader:\n","            images, labels = data\n","            images = images.view(-1, 3072)\n","            images = images.cuda()\n","            labels = labels.cuda()\n","\n","            outputs = net(images)\n","            _, predicted = torch.max(outputs.data, 1)\n","            total += labels.size(0)\n","            correct += (predicted == labels).sum().item()\n","\n","        test_acc = 100 * correct / total\n","    return test_acc"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"LiOCP6TqWw2V","executionInfo":{"status":"ok","timestamp":1613106685157,"user_tz":-540,"elapsed":578,"user":{"displayName":"‍심준교(학부학생/공과대학 산업공학과)","photoUrl":"","userId":"04091016504591860502"}}},"source":["def experiment(partition, args):\n","  \n","    net = MLP(args.in_dim, args.out_dim, args.hid_dim, args.n_layer, args.act, args.dropout, args.use_bn, args.use_xavier)\n","    net.cuda()\n","\n","    criterion = nn.CrossEntropyLoss()\n","    if args.optim == 'SGD':\n","        optimizer = optim.RMSprop(net.parameters(), lr=args.lr, weight_decay=args.l2)\n","    elif args.optim == 'RMSprop':\n","        optimizer = optim.RMSprop(net.parameters(), lr=args.lr, weight_decay=args.l2)\n","    elif args.optim == 'Adam':\n","        optimizer = optim.Adam(net.parameters(), lr=args.lr, weight_decay=args.l2)\n","    else:\n","        raise ValueError('In-valid optimizer choice')\n","    \n","    for epoch in range(args.epoch):  # loop over the dataset multiple times\n","        ts = time.time()\n","        net, train_loss, train_acc = train(net, partition, optimizer, criterion, args)\n","        val_loss, val_acc = validate(net, partition, criterion, args)\n","        te = time.time()\n","        print('Epoch {}, Acc(train/val): {:2.2f}/{:2.2f}, Loss(train/val) {:2.2f}/{:2.2f}. Took {:2.2f} sec'.format(epoch, train_acc, val_acc, train_loss, val_loss, te-ts))\n","        \n","    test_acc = test(net, partition, args)    \n","    return train_loss, val_loss, train_acc, val_acc, test_acc"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"omgExzmQgU1J"},"source":["## Experiment"]},{"cell_type":"code","metadata":{"id":"DRoOy_B3Wu7B","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613107554873,"user_tz":-540,"elapsed":867804,"user":{"displayName":"‍심준교(학부학생/공과대학 산업공학과)","photoUrl":"","userId":"04091016504591860502"}},"outputId":"6077920c-7c88-45cc-e2f3-deb434e44ea5"},"source":["# ====== Random Seed Initialization ====== #\n","seed = 123\n","np.random.seed(seed)\n","torch.manual_seed(seed)\n","\n","parser = argparse.ArgumentParser()\n","args = parser.parse_args(\"\")\n","\n","# ====== Model Capacity ====== #\n","args.in_dim = 3072\n","args.out_dim = 10\n","args.hid_dim = 100\n","args.act = 'relu'\n","\n","# ====== Regularization ======= #\n","args.dropout = 0.2\n","args.use_bn = True\n","args.l2 = 0.00001\n","args.use_xavier = True\n","\n","# ====== Optimizer & Training ====== #\n","args.optim = 'RMSprop' #'RMSprop' #SGD, RMSprop, ADAM...\n","args.lr = 0.0015\n","args.epoch = 10\n","\n","args.train_batch_size = 256\n","args.test_batch_size = 1024\n","\n","# ====== Experiment Variable ====== #\n","name_var1 = 'n_layer'\n","name_var2 = 'hid_dim'\n","list_var1 = [3, 3, 4]\n","list_var2 = [500, 300, 700]\n","\n","\n","for var1 in list_var1:\n","    for var2 in list_var2:\n","        setattr(args, name_var1, var1)\n","        setattr(args, name_var2, var2)\n","        print(args)\n","        result = experiment(partition, args)  "],"execution_count":8,"outputs":[{"output_type":"stream","text":["Namespace(act='relu', dropout=0.2, epoch=10, hid_dim=500, in_dim=3072, l2=1e-05, lr=0.0015, n_layer=3, optim='RMSprop', out_dim=10, test_batch_size=1024, train_batch_size=256, use_bn=True, use_xavier=True)\n","Epoch 0, Acc(train/val): 35.03/28.34, Loss(train/val) 1.84/9.83. Took 9.99 sec\n","Epoch 1, Acc(train/val): 45.49/40.22, Loss(train/val) 1.52/1.75. Took 9.50 sec\n","Epoch 2, Acc(train/val): 49.80/44.68, Loss(train/val) 1.40/1.57. Took 9.35 sec\n","Epoch 3, Acc(train/val): 52.40/45.83, Loss(train/val) 1.33/1.60. Took 9.20 sec\n","Epoch 4, Acc(train/val): 55.35/47.49, Loss(train/val) 1.24/1.54. Took 9.53 sec\n","Epoch 5, Acc(train/val): 57.92/47.59, Loss(train/val) 1.18/1.54. Took 9.48 sec\n","Epoch 6, Acc(train/val): 60.06/45.31, Loss(train/val) 1.12/1.69. Took 9.36 sec\n","Epoch 7, Acc(train/val): 61.85/49.14, Loss(train/val) 1.07/1.52. Took 9.57 sec\n","Epoch 8, Acc(train/val): 63.77/51.18, Loss(train/val) 1.01/1.47. Took 9.42 sec\n","Epoch 9, Acc(train/val): 66.03/48.12, Loss(train/val) 0.95/1.61. Took 9.42 sec\n","Namespace(act='relu', dropout=0.2, epoch=10, hid_dim=300, in_dim=3072, l2=1e-05, lr=0.0015, n_layer=3, optim='RMSprop', out_dim=10, test_batch_size=1024, train_batch_size=256, use_bn=True, use_xavier=True)\n","Epoch 0, Acc(train/val): 36.56/37.85, Loss(train/val) 1.77/1.86. Took 9.33 sec\n","Epoch 1, Acc(train/val): 45.80/38.01, Loss(train/val) 1.51/1.77. Took 9.51 sec\n","Epoch 2, Acc(train/val): 49.48/44.74, Loss(train/val) 1.41/1.56. Took 9.52 sec\n","Epoch 3, Acc(train/val): 52.70/44.54, Loss(train/val) 1.32/1.59. Took 9.53 sec\n","Epoch 4, Acc(train/val): 55.02/45.94, Loss(train/val) 1.25/1.61. Took 9.52 sec\n","Epoch 5, Acc(train/val): 57.08/49.03, Loss(train/val) 1.20/1.47. Took 9.54 sec\n","Epoch 6, Acc(train/val): 59.56/48.69, Loss(train/val) 1.14/1.49. Took 9.85 sec\n","Epoch 7, Acc(train/val): 61.42/49.37, Loss(train/val) 1.08/1.51. Took 9.47 sec\n","Epoch 8, Acc(train/val): 62.96/50.24, Loss(train/val) 1.03/1.49. Took 9.18 sec\n","Epoch 9, Acc(train/val): 64.52/46.85, Loss(train/val) 0.99/1.71. Took 9.46 sec\n","Namespace(act='relu', dropout=0.2, epoch=10, hid_dim=700, in_dim=3072, l2=1e-05, lr=0.0015, n_layer=3, optim='RMSprop', out_dim=10, test_batch_size=1024, train_batch_size=256, use_bn=True, use_xavier=True)\n","Epoch 0, Acc(train/val): 34.38/34.23, Loss(train/val) 1.92/1.88. Took 9.51 sec\n","Epoch 1, Acc(train/val): 43.96/41.98, Loss(train/val) 1.56/1.68. Took 9.23 sec\n","Epoch 2, Acc(train/val): 48.45/41.69, Loss(train/val) 1.43/1.68. Took 9.31 sec\n","Epoch 3, Acc(train/val): 51.80/38.41, Loss(train/val) 1.35/1.90. Took 9.35 sec\n","Epoch 4, Acc(train/val): 54.53/38.08, Loss(train/val) 1.27/4.46. Took 9.52 sec\n","Epoch 5, Acc(train/val): 56.77/48.35, Loss(train/val) 1.20/1.50. Took 9.41 sec\n","Epoch 6, Acc(train/val): 59.45/45.69, Loss(train/val) 1.13/1.64. Took 9.37 sec\n","Epoch 7, Acc(train/val): 61.43/48.34, Loss(train/val) 1.07/1.61. Took 9.42 sec\n","Epoch 8, Acc(train/val): 64.05/46.75, Loss(train/val) 1.01/1.62. Took 9.49 sec\n","Epoch 9, Acc(train/val): 66.03/48.03, Loss(train/val) 0.95/1.65. Took 9.47 sec\n","Namespace(act='relu', dropout=0.2, epoch=10, hid_dim=500, in_dim=3072, l2=1e-05, lr=0.0015, n_layer=3, optim='RMSprop', out_dim=10, test_batch_size=1024, train_batch_size=256, use_bn=True, use_xavier=True)\n","Epoch 0, Acc(train/val): 34.51/38.25, Loss(train/val) 1.85/1.74. Took 8.98 sec\n","Epoch 1, Acc(train/val): 44.70/41.90, Loss(train/val) 1.54/1.66. Took 9.41 sec\n","Epoch 2, Acc(train/val): 49.26/40.99, Loss(train/val) 1.41/1.73. Took 9.08 sec\n","Epoch 3, Acc(train/val): 52.36/42.84, Loss(train/val) 1.33/1.67. Took 9.34 sec\n","Epoch 4, Acc(train/val): 54.86/46.19, Loss(train/val) 1.26/1.56. Took 9.34 sec\n","Epoch 5, Acc(train/val): 57.24/46.10, Loss(train/val) 1.19/1.58. Took 9.25 sec\n","Epoch 6, Acc(train/val): 59.66/47.54, Loss(train/val) 1.12/1.52. Took 9.28 sec\n","Epoch 7, Acc(train/val): 61.82/49.10, Loss(train/val) 1.07/1.50. Took 9.01 sec\n","Epoch 8, Acc(train/val): 63.99/48.71, Loss(train/val) 1.00/1.57. Took 9.09 sec\n","Epoch 9, Acc(train/val): 65.73/45.55, Loss(train/val) 0.96/1.72. Took 9.32 sec\n","Namespace(act='relu', dropout=0.2, epoch=10, hid_dim=300, in_dim=3072, l2=1e-05, lr=0.0015, n_layer=3, optim='RMSprop', out_dim=10, test_batch_size=1024, train_batch_size=256, use_bn=True, use_xavier=True)\n","Epoch 0, Acc(train/val): 37.42/41.19, Loss(train/val) 1.75/1.64. Took 9.35 sec\n","Epoch 1, Acc(train/val): 46.12/42.14, Loss(train/val) 1.49/1.60. Took 9.07 sec\n","Epoch 2, Acc(train/val): 50.35/40.89, Loss(train/val) 1.39/1.81. Took 9.26 sec\n","Epoch 3, Acc(train/val): 52.89/47.01, Loss(train/val) 1.32/1.49. Took 9.52 sec\n","Epoch 4, Acc(train/val): 55.21/48.46, Loss(train/val) 1.25/1.47. Took 9.05 sec\n","Epoch 5, Acc(train/val): 57.27/46.21, Loss(train/val) 1.19/1.57. Took 8.83 sec\n","Epoch 6, Acc(train/val): 59.71/45.16, Loss(train/val) 1.13/1.59. Took 9.41 sec\n","Epoch 7, Acc(train/val): 61.63/48.02, Loss(train/val) 1.08/1.54. Took 9.03 sec\n","Epoch 8, Acc(train/val): 63.18/50.56, Loss(train/val) 1.03/1.44. Took 9.26 sec\n","Epoch 9, Acc(train/val): 65.06/52.11, Loss(train/val) 0.98/1.40. Took 9.25 sec\n","Namespace(act='relu', dropout=0.2, epoch=10, hid_dim=700, in_dim=3072, l2=1e-05, lr=0.0015, n_layer=3, optim='RMSprop', out_dim=10, test_batch_size=1024, train_batch_size=256, use_bn=True, use_xavier=True)\n","Epoch 0, Acc(train/val): 34.55/34.94, Loss(train/val) 1.91/1.95. Took 9.74 sec\n","Epoch 1, Acc(train/val): 44.47/36.25, Loss(train/val) 1.55/1.87. Took 9.61 sec\n","Epoch 2, Acc(train/val): 48.78/39.50, Loss(train/val) 1.43/1.77. Took 9.27 sec\n","Epoch 3, Acc(train/val): 52.24/44.99, Loss(train/val) 1.33/1.63. Took 9.17 sec\n","Epoch 4, Acc(train/val): 54.63/44.44, Loss(train/val) 1.26/1.66. Took 9.13 sec\n","Epoch 5, Acc(train/val): 57.91/45.08, Loss(train/val) 1.18/1.64. Took 8.95 sec\n","Epoch 6, Acc(train/val): 59.73/44.54, Loss(train/val) 1.13/1.78. Took 9.37 sec\n","Epoch 7, Acc(train/val): 62.12/49.19, Loss(train/val) 1.06/1.52. Took 9.24 sec\n","Epoch 8, Acc(train/val): 64.11/23.43, Loss(train/val) 1.00/26.85. Took 9.02 sec\n","Epoch 9, Acc(train/val): 66.32/48.52, Loss(train/val) 0.95/1.71. Took 9.61 sec\n","Namespace(act='relu', dropout=0.2, epoch=10, hid_dim=500, in_dim=3072, l2=1e-05, lr=0.0015, n_layer=4, optim='RMSprop', out_dim=10, test_batch_size=1024, train_batch_size=256, use_bn=True, use_xavier=True)\n","Epoch 0, Acc(train/val): 34.28/36.51, Loss(train/val) 1.87/1.78. Took 9.04 sec\n","Epoch 1, Acc(train/val): 43.75/34.91, Loss(train/val) 1.56/1.86. Took 9.15 sec\n","Epoch 2, Acc(train/val): 47.99/40.56, Loss(train/val) 1.45/1.65. Took 9.06 sec\n","Epoch 3, Acc(train/val): 50.83/43.29, Loss(train/val) 1.38/1.57. Took 9.43 sec\n","Epoch 4, Acc(train/val): 53.78/43.19, Loss(train/val) 1.29/1.70. Took 9.21 sec\n","Epoch 5, Acc(train/val): 56.19/46.22, Loss(train/val) 1.23/1.53. Took 8.88 sec\n","Epoch 6, Acc(train/val): 57.99/47.52, Loss(train/val) 1.17/1.57. Took 9.25 sec\n","Epoch 7, Acc(train/val): 60.45/49.04, Loss(train/val) 1.11/1.48. Took 9.36 sec\n","Epoch 8, Acc(train/val): 62.41/46.44, Loss(train/val) 1.06/1.65. Took 9.55 sec\n","Epoch 9, Acc(train/val): 64.31/47.82, Loss(train/val) 1.01/1.59. Took 9.21 sec\n","Namespace(act='relu', dropout=0.2, epoch=10, hid_dim=300, in_dim=3072, l2=1e-05, lr=0.0015, n_layer=4, optim='RMSprop', out_dim=10, test_batch_size=1024, train_batch_size=256, use_bn=True, use_xavier=True)\n","Epoch 0, Acc(train/val): 35.90/34.39, Loss(train/val) 1.79/1.90. Took 9.26 sec\n","Epoch 1, Acc(train/val): 44.79/39.68, Loss(train/val) 1.54/1.79. Took 9.29 sec\n","Epoch 2, Acc(train/val): 48.89/43.60, Loss(train/val) 1.43/1.58. Took 9.39 sec\n","Epoch 3, Acc(train/val): 51.87/42.74, Loss(train/val) 1.35/1.66. Took 8.99 sec\n","Epoch 4, Acc(train/val): 53.82/43.52, Loss(train/val) 1.28/1.63. Took 9.27 sec\n","Epoch 5, Acc(train/val): 56.48/45.17, Loss(train/val) 1.22/1.60. Took 9.30 sec\n","Epoch 6, Acc(train/val): 58.45/48.96, Loss(train/val) 1.17/1.49. Took 9.38 sec\n","Epoch 7, Acc(train/val): 60.34/50.44, Loss(train/val) 1.11/1.44. Took 9.18 sec\n","Epoch 8, Acc(train/val): 62.20/50.99, Loss(train/val) 1.06/1.49. Took 9.42 sec\n","Epoch 9, Acc(train/val): 63.67/48.21, Loss(train/val) 1.02/1.62. Took 9.51 sec\n","Namespace(act='relu', dropout=0.2, epoch=10, hid_dim=700, in_dim=3072, l2=1e-05, lr=0.0015, n_layer=4, optim='RMSprop', out_dim=10, test_batch_size=1024, train_batch_size=256, use_bn=True, use_xavier=True)\n","Epoch 0, Acc(train/val): 33.06/34.59, Loss(train/val) 1.95/1.85. Took 9.39 sec\n","Epoch 1, Acc(train/val): 43.52/37.50, Loss(train/val) 1.57/1.83. Took 9.23 sec\n","Epoch 2, Acc(train/val): 48.31/40.19, Loss(train/val) 1.45/2.56. Took 9.30 sec\n","Epoch 3, Acc(train/val): 50.76/43.99, Loss(train/val) 1.38/1.64. Took 9.39 sec\n","Epoch 4, Acc(train/val): 53.69/42.28, Loss(train/val) 1.29/1.82. Took 9.46 sec\n","Epoch 5, Acc(train/val): 56.42/44.82, Loss(train/val) 1.22/1.69. Took 9.82 sec\n","Epoch 6, Acc(train/val): 57.92/45.08, Loss(train/val) 1.18/1.68. Took 9.27 sec\n","Epoch 7, Acc(train/val): 60.61/44.43, Loss(train/val) 1.11/1.69. Took 9.31 sec\n","Epoch 8, Acc(train/val): 62.94/42.39, Loss(train/val) 1.05/1.87. Took 9.60 sec\n","Epoch 9, Acc(train/val): 64.64/48.53, Loss(train/val) 0.99/1.64. Took 9.25 sec\n"],"name":"stdout"}]}]}